import app from './app' // Importar la aplicaci√≥n Express configurada
import { env } from './config/env' // Importar variables de entorno
import { prisma } from './config/database' // Importar instancia de Prisma

const PORT = env.PORT

// Funci√≥n para iniciar el servidor
const startServer = async () => {
  try {
    // Verificar conexi√≥n a la base de datos (opcional pero recomendado)
    await prisma.$connect()
    console.log('üêò Conectado exitosamente a la base de datos.')

    // Iniciar el servidor Express
    const server = app.listen(PORT, () => {
      console.log(`üöÄ Servidor corriendo en http://localhost:${PORT}`)
      console.log(`üå± Entorno actual: ${env.NODE_ENV}`)
    })

    // Manejo de se√±ales para cierre gr√°cil (graceful shutdown)
    const shutdown = async (signal: string) => {
      console.log(`\nüö¶ Recibida se√±al ${signal}. Cerrando servidor...`)
      server.close(async () => {
        console.log('üîå Servidor HTTP cerrado.')
        try {
          await prisma.$disconnect()
          console.log('üêò Desconectado de la base de datos.')
          process.exit(0) // Salir exitosamente
        } catch (e) {
          console.error('‚ùå Error al desconectar de la base de datos:', e)
          process.exit(1) // Salir con error
        }
      })
    }

    process.on('SIGTERM', () => shutdown('SIGTERM')) // Se√±al de terminaci√≥n (ej: Docker stop)
    process.on('SIGINT', () => shutdown('SIGINT')) // Se√±al de interrupci√≥n (ej: Ctrl+C)

  } catch (error) {
    console.error('‚ùå Error al iniciar el servidor:', error)
    await prisma.$disconnect().catch(e => console.error('Error al desconectar DB en fallo:', e)); // Intentar desconectar DB
    process.exit(1) // Salir con c√≥digo de error
  }
}

// Ejecutar la funci√≥n de inicio
startServer()